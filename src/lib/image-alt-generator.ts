/**
 * Utility function to generate alt text from image filenames
 * Converts image paths to human-readable descriptions
 */

/**
 * Generate alt text from an image path/filename
 * @param imagePath - The image path or filename
 * @returns Human-readable alt text
 */
export function generateAltTextFromPath(imagePath: string | undefined | null): string {
  if (!imagePath) {
    return '';
  }

  // Extract just the filename from the path
  const pathParts = imagePath.split('/');
  const filename = pathParts[pathParts.length - 1];

  // Remove file extension
  const nameWithoutExtension = filename
    .replace(/\.(jpg|jpeg|png|gif|webp|svg|avif|ico|bmp|tiff?)$/i, '');

  // Replace special characters with spaces
  let altText = nameWithoutExtension
    .replace(/[-_]/g, ' ')  // Replace hyphens and underscores with spaces
    .replace(/\s+/g, ' ')   // Replace multiple spaces with single space
    .trim();                // Remove leading/trailing spaces

  // Capitalize first letter of each word
  altText = altText
    .split(' ')
    .map(word => {
      // Keep acronyms and already capitalized words as-is
      if (word === word.toUpperCase() && word.length > 1) {
        return word;
      }
      // Capitalize first letter
      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
    })
    .join(' ');

  return altText;
}

/**
 * Generate alt text with fallback to a default value
 * @param providedAlt - The user-provided alt text (may be empty)
 * @param imagePath - The image path to generate alt text from
 * @param fallback - Optional fallback text if generation fails
 * @returns Alt text (provided, generated, or fallback)
 */
export function getAltText(
  providedAlt: string | undefined,
  imagePath: string | undefined,
  fallback: string = 'Image'
): string {
  // Use provided alt text if available and not empty
  if (providedAlt && providedAlt.trim()) {
    return providedAlt;
  }

  // Generate from path if available
  const generated = generateAltTextFromPath(imagePath);
  if (generated) {
    return generated;
  }

  // Use fallback
  return fallback;
}

/**
 * Check if alt text was likely auto-generated
 * Useful for debugging and quality checks
 */
export function isAutoGeneratedAlt(altText: string, imagePath: string): boolean {
  const generated = generateAltTextFromPath(imagePath);
  return altText === generated;
}